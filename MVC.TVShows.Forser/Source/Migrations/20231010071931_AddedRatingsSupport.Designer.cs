// <auto-generated />
using System;
using MVC.TVShows.Forser.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC.TVShows.Forser.Migrations
{
    [DbContext(typeof(TVShowContext))]
    [Migration("20231010071931_AddedRatingsSupport")]
    partial class AddedRatingsSupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MVC.TVShows.Forser.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("ShowGenre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Checked = false,
                            ShowGenre = "Action Comedy"
                        },
                        new
                        {
                            Id = 2,
                            Checked = false,
                            ShowGenre = "Adult Chat"
                        },
                        new
                        {
                            Id = 3,
                            Checked = false,
                            ShowGenre = "Animated Series"
                        },
                        new
                        {
                            Id = 4,
                            Checked = false,
                            ShowGenre = "Animated Sitcom"
                        },
                        new
                        {
                            Id = 5,
                            Checked = false,
                            ShowGenre = "Anthology Series"
                        },
                        new
                        {
                            Id = 6,
                            Checked = false,
                            ShowGenre = "Apocalyptic and Post-Apocalyptic Fiction"
                        },
                        new
                        {
                            Id = 7,
                            Checked = false,
                            ShowGenre = "Archive Television Program"
                        },
                        new
                        {
                            Id = 8,
                            Checked = false,
                            ShowGenre = "Breakfast Television"
                        },
                        new
                        {
                            Id = 9,
                            Checked = false,
                            ShowGenre = "Casting Television"
                        },
                        new
                        {
                            Id = 10,
                            Checked = false,
                            ShowGenre = "Children's Television Series"
                        },
                        new
                        {
                            Id = 11,
                            Checked = false,
                            ShowGenre = "Chopshocky"
                        },
                        new
                        {
                            Id = 12,
                            Checked = false,
                            ShowGenre = "Comedy Drama"
                        },
                        new
                        {
                            Id = 13,
                            Checked = false,
                            ShowGenre = "Cooking Show"
                        },
                        new
                        {
                            Id = 14,
                            Checked = false,
                            ShowGenre = "Court Show"
                        });
                });

            modelBuilder.Entity("MVC.TVShows.Forser.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Certification = "TV-Y",
                            Country = "USA",
                            Description = "This program is designed to be appropriate for all children.",
                            IsSelected = false
                        },
                        new
                        {
                            Id = 2,
                            Certification = "TV-Y7",
                            Country = "USA",
                            Description = "This program is designed for children age 7 and above.",
                            IsSelected = false
                        },
                        new
                        {
                            Id = 3,
                            Certification = "TV-G",
                            Country = "USA",
                            Description = "Most parents will find this program suitable for all ages.",
                            IsSelected = false
                        });
                });

            modelBuilder.Entity("MVC.TVShows.Forser.Models.TVShow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BeenWatched")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfEpisodes")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSeasons")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShowCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShowStarted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TVShows");
                });

            modelBuilder.Entity("MVC.TVShows.Forser.Models.TVShow_Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Genre_Id")
                        .HasColumnType("int");

                    b.Property<int?>("TVShow_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Genre_Id");

                    b.HasIndex("TVShow_Id");

                    b.ToTable("TVShow_Genre");
                });

            modelBuilder.Entity("MVC.TVShows.Forser.Models.TVShow_Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Rating_Id")
                        .HasColumnType("int");

                    b.Property<int?>("TVShow_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Rating_Id");

                    b.HasIndex("TVShow_Id");

                    b.ToTable("TVShow_Rating");
                });

            modelBuilder.Entity("MVC.TVShows.Forser.Models.TVShow_Genre", b =>
                {
                    b.HasOne("MVC.TVShows.Forser.Models.Genre", "Genre")
                        .WithMany("TVShow_Genre")
                        .HasForeignKey("Genre_Id");

                    b.HasOne("MVC.TVShows.Forser.Models.TVShow", "TVShow")
                        .WithMany("Genres")
                        .HasForeignKey("TVShow_Id");

                    b.Navigation("Genre");

                    b.Navigation("TVShow");
                });

            modelBuilder.Entity("MVC.TVShows.Forser.Models.TVShow_Rating", b =>
                {
                    b.HasOne("MVC.TVShows.Forser.Models.Rating", "Rating")
                        .WithMany("TVShow_Rating")
                        .HasForeignKey("Rating_Id");

                    b.HasOne("MVC.TVShows.Forser.Models.TVShow", "TVShow")
                        .WithMany("Ratings")
                        .HasForeignKey("TVShow_Id");

                    b.Navigation("Rating");

                    b.Navigation("TVShow");
                });

            modelBuilder.Entity("MVC.TVShows.Forser.Models.Genre", b =>
                {
                    b.Navigation("TVShow_Genre");
                });

            modelBuilder.Entity("MVC.TVShows.Forser.Models.Rating", b =>
                {
                    b.Navigation("TVShow_Rating");
                });

            modelBuilder.Entity("MVC.TVShows.Forser.Models.TVShow", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
